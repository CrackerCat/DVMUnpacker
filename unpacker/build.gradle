apply plugin: 'com.android.application'


android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    //拦截org.apache.http下面的一些api
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.virjar.dvmunpacker.unpacker"
        minSdkVersion 19
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        externalNativeBuild {
            cmake {
                // 请注意，目前不支持64位 'x86', 'x86_64', 'arm64-v8a'
                abiFilters 'armeabi-v7a'
            }
        }

    }

    signingConfigs {
        release {
            storeFile rootProject.file('deploy/hermes_key')
            storePassword "hermes"
            keyAlias "hermes"
            keyPassword "hermes"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        //debug ,也使用release的key，hermes代码无法在线调试，所以没有debug的意义
        debug {
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }

}

//由于我们可能引用snapshot版本的API，此时gradle缓存导致无法加载到最新的依赖，此时可以打开如下注释，这样就不会走缓存
//configurations.all {
//    // check for updates every build
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.guava:guava:23.4-android'
    implementation 'com.google.code.findbugs:jsr305:2.0.1'

    compileOnly 'de.robv.android.xposed:api:82'
    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    implementation 'com.alibaba:fastjson:1.1.67.android'

    //需要移植baksamli，而非直接依赖中央仓库，这是因为爱加密会检查baksmali的存在，存在则闪退
    //考虑对api的侵入性，我这里不修改baksmali内部代码（仅仅修改包名，防止爱加密检查），对baksmali的功能增强使用反射等hack的方式
    //见 com.virjar.xposedhooktool.unshell.baksmali.MemoryMethodDexFile
    //我们使用baksmali反编译dex的能力，但是baksmali是我们需要follow的，这样才能在未来应对加解密库对baksmali本身bug特征的防御突破
    implementation project(":baksmali")

   implementation project(":commons")
}
